#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 14 2022
@author: Sylvain Brisson sylvain.brisson@ens.fr

Tools to plot the green functions (from the files generated by green_extract)

"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib

import os
import argparse
import re

if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("--idtn", type=int, required=True)
    args = parser.parse_args()

    # getting green functions files

    files_S00 = pd.DataFrame(columns=['filename','angular_order'])
    files_S01 = pd.DataFrame(columns=['filename','angular_order'])
    files_S10 = pd.DataFrame(columns=['filename','angular_order'])
    files_S11 = pd.DataFrame(columns=['filename','angular_order'])
    files_T = pd.DataFrame(columns=['filename','angular_order'])
    
    S00_data_found = False
    S01_data_found = False
    S10_data_found = False
    S11_data_found = False
    T_data_found   = False

    comp_correspondance = {"00":files_S00, "01":files_S01, "10":files_S10, "11":files_S11, "5":files_T}
    comp_found = {"00":S00_data_found, "01":S01_data_found, "10":S10_data_found, "11":S11_data_found, "5":T_data_found}

    green_file_re = r"green_+(?P<composante>\d{1,2})_l(?P<angular_order>\d{4})_(?P<idtn>\d)"

    print(">> Searching for green functions files")

    for f in os.listdir(os.getcwd()):
        
        search = re.search(green_file_re, f)
        if search:
            
            if int(search["idtn"]) == args.idtn:
                df = comp_correspondance[search["composante"]]
                comp_found[search["composante"]] = True
                df.loc[len(df.index)] = [f,int(search["angular_order"])]

    files_S00 = files_S00.sort_values("angular_order") 
    files_S01 = files_S01.sort_values("angular_order") 
    files_S10 = files_S01.sort_values("angular_order") 
    files_S11 = files_S11.sort_values("angular_order") 
    files_T = files_T.sort_values("angular_order") 

    # plotting 

    print(">> Plotting")

    titles = {
        "00" : "Spheroidal (00)",
        "01" : "Spheroidal (0+)",
        "10" : "Spheroidal (+0)",
        "11" : "Spheroidal (++)",
        "5"  : "Toroidal",
    }

    components = list(titles.keys())

    for comp in components:
        
        df = comp_correspondance[comp]
        data_found = comp_found[comp]
        title = titles[comp]
        
        print(comp)
        print(df)
        
        if not(data_found):
            print(f"WARNING : no data found for component {title}")
            continue

        cNorm  = matplotlib.colors.Normalize(vmin=df["angular_order"].min(), vmax=df["angular_order"].max())
        scalarMap = matplotlib.cm.ScalarMappable(norm=cNorm, cmap="gist_rainbow")

        fig,ax = plt.subplots(figsize=(12,8))
        
        for idx,row in df.iterrows():
            try:
                data = np.loadtxt(row['filename'])
                ax.plot(data[::2,0], data[::2,1],color=scalarMap.to_rgba(row["angular_order"]))
            except IndexError:
                print(f"WARNING : issue with file {row['filename']}")
            
        plt.colorbar(scalarMap, label="Angular order")
        ax.set_title(title)
        ax.set_xlabel("Frequencie")
        ax.set_ylabel("Green function")

        outFile = title.replace(" ","_")+".png"
        print(f">> Saving {outFile}")
        fig.savefig(outFile,dpi=500,bbox_inches='tight')


